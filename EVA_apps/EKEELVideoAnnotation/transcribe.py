if __name__ == "__main__":
    import stable_whisper
    # TODO stable-ts version 2.17.3: passing the language is not working, will be inferenced at cost of small increase in time
    # self._model.transcribe(wav_path.__str__(), decode_options={"language":language}) \
    #             .save_as_json(json_path.__str__())
    model = stable_whisper.load_model(name='large-v3', cpu_preload=False)
    
    from pathlib import Path
    base_folder = Path(__file__).parent.joinpath("static").joinpath("videos")
    
    from db_mongo import get_untranscribed_videos, insert_video_data, get_video_data, remove_annotations_data
    from time import sleep
    from json import load
    from audio import convert_mp4_to_wav
    from words import apply_italian_fixes
    import os
    
    try:
        while True:
            videos_metadata:list = get_untranscribed_videos()
            if len(videos_metadata):
                print(f"Got videos {videos_metadata[0][0]}")
            for (video_id, language) in videos_metadata:
                video_folder_path = base_folder.joinpath(video_id)
                wav_path = video_folder_path.joinpath(video_id+".wav")
                convert_mp4_to_wav(video_folder_path, video_id)
                json_path = video_folder_path.joinpath(video_id+".json")
                model.transcribe(wav_path.__str__()).save_as_json(json_path.__str__())
                os.remove(wav_path)
                with open(json_path) as f:
                    transcribed_data = load(f)
                if language == "it":
                    transcribed_data = apply_italian_fixes(transcribed_data["segments"],min_segment_len=4)
                video_data = get_video_data(video_id)
                video_data["transcript_data"] = {"is_whisper_transcribed":True, "is_autogenerated":True, "text":transcribed_data}
                insert_video_data(video_data,update=False)
                remove_annotations_data(video_id)
            sleep(30)
    except Exception as e:
        import sys
        import os
        import traceback
    
        tb_details = traceback.extract_tb(sys.exc_info()[2])

        print(f"Exception: {e}")
        for frame in tb_details:
            filename = os.path.basename(frame.filename)
            # Read the specific line of code
            line_number = frame.lineno
            with open(frame.filename, 'r') as f:
                lines = f.readlines()
                error_line = lines[line_number - 1].strip()
            print(f"File: {filename}, Function: {frame.name}, Line: {line_number} | {error_line}")